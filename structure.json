{
  "app": {
    "_layout.tsx": "import App from \"@/navigation/Main\";\r\n\r\nexport default function RootLayout() {\r\n  return <App />;\r\n}\r\n",
    "(tabs)": {
      "_layout.tsx": "import { Tabs } from 'expo-router';\r\nimport React from 'react';\r\nimport { Platform } from 'react-native';\r\n\r\nimport { HapticTab } from '@/components/HapticTab';\r\nimport { IconSymbol } from '@/components/ui/IconSymbol';\r\nimport TabBarBackground from '@/components/ui/TabBarBackground';\r\nimport { Colors } from '@/constants/Colors';\r\nimport { useColorScheme } from '@/hooks/useColorScheme';\r\n\r\nexport default function TabLayout() {\r\n  const colorScheme = useColorScheme();\r\n\r\n  return (\r\n    <Tabs\r\n      screenOptions={{\r\n        tabBarActiveTintColor: Colors[colorScheme ?? 'light'].tint,\r\n        headerShown: false,\r\n        tabBarButton: HapticTab,\r\n        tabBarBackground: TabBarBackground,\r\n        tabBarStyle: Platform.select({\r\n          ios: {\r\n            // Use a transparent background on iOS to show the blur effect\r\n            position: 'absolute',\r\n          },\r\n          default: {},\r\n        }),\r\n      }}>\r\n      <Tabs.Screen\r\n        name=\"index\"\r\n        options={{\r\n          title: 'Home',\r\n          tabBarIcon: ({ color }) => <IconSymbol size={28} name=\"house.fill\" color={color} />,\r\n        }}\r\n      />\r\n      <Tabs.Screen\r\n        name=\"explore\"\r\n        options={{\r\n          title: 'Explore',\r\n          tabBarIcon: ({ color }) => <IconSymbol size={28} name=\"paperplane.fill\" color={color} />,\r\n        }}\r\n      />\r\n    </Tabs>\r\n  );\r\n}\r\n",
      "explore.tsx": "import { Image } from 'expo-image';\r\nimport { Platform, StyleSheet } from 'react-native';\r\n\r\nimport { Collapsible } from '@/components/Collapsible';\r\nimport { ExternalLink } from '@/components/ExternalLink';\r\nimport ParallaxScrollView from '@/components/ParallaxScrollView';\r\nimport { ThemedText } from '@/components/ThemedText';\r\nimport { ThemedView } from '@/components/ThemedView';\r\nimport { IconSymbol } from '@/components/ui/IconSymbol';\r\n\r\nexport default function TabTwoScreen() {\r\n  return (\r\n    <></>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  headerImage: {\r\n    color: '#808080',\r\n    bottom: -90,\r\n    left: -35,\r\n    position: 'absolute',\r\n  },\r\n  titleContainer: {\r\n    flexDirection: 'row',\r\n    gap: 8,\r\n  },\r\n});\r\n",
      "index.tsx": "import { Image } from 'expo-image';\r\nimport { Platform, StyleSheet } from 'react-native';\r\n\r\nimport { HelloWave } from '@/components/HelloWave';\r\nimport ParallaxScrollView from '@/components/ParallaxScrollView';\r\nimport { ThemedText } from '@/components/ThemedText';\r\nimport { ThemedView } from '@/components/ThemedView';\r\n\r\nexport default function HomeScreen() {\r\n  return (\r\n    <></>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  titleContainer: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    gap: 8,\r\n  },\r\n  stepContainer: {\r\n    gap: 8,\r\n    marginBottom: 8,\r\n  },\r\n  reactLogo: {\r\n    height: 178,\r\n    width: 290,\r\n    bottom: 0,\r\n    left: 0,\r\n    position: 'absolute',\r\n  },\r\n});\r\n"
    },
    "+not-found.tsx": "import { Link, Stack } from 'expo-router';\r\nimport { StyleSheet } from 'react-native';\r\n\r\nimport { ThemedText } from '@/components/ThemedText';\r\nimport { ThemedView } from '@/components/ThemedView';\r\n\r\nexport default function NotFoundScreen() {\r\n  return (\r\n    <>\r\n      <Stack.Screen options={{ title: 'Oops!' }} />\r\n      <ThemedView style={styles.container}>\r\n        <ThemedText type=\"title\">This screen does not exist.</ThemedText>\r\n        <Link href=\"/\" style={styles.link}>\r\n          <ThemedText type=\"link\">Go to home screen!</ThemedText>\r\n        </Link>\r\n      </ThemedView>\r\n    </>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    padding: 20,\r\n  },\r\n  link: {\r\n    marginTop: 15,\r\n    paddingVertical: 15,\r\n  },\r\n});\r\n",
    "app.tsx": "\"use client\"\r\nimport { NavigationContainer } from \"@react-navigation/native\"\r\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\"\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\"\r\nimport { SafeAreaProvider } from \"react-native-safe-area-context\"\r\nimport { StatusBar } from \"expo-status-bar\"\r\nimport { Home, User } from \"lucide-react-native\"\r\n\r\n// Screens\r\nimport FeedScreen from \"@/screens/FeedScreen\"\r\nimport ProfileScreen from \"@/screens/ProfileScreen\"\r\nimport PostDetailScreen from \"@/screens/PostDetailScreen\"\r\nimport LoginScreen from \"@/screens/LoginScreen\"\r\n\r\n// Context\r\nimport { AuthProvider, useAuth } from \"./context/AuthContext\"\r\n\r\nconst Tab = createBottomTabNavigator()\r\nconst Stack = createNativeStackNavigator()\r\n\r\nfunction HomeTabs() {\r\n  return (\r\n    <Tab.Navigator\r\n      screenOptions={({ route }) => ({\r\n        tabBarIcon: ({ color, size }) => {\r\n          if (route.name === \"Feed\") {\r\n            return <Home size={size} color={color} />\r\n          } else if (route.name === \"Profile\") {\r\n            return <User size={size} color={color} />\r\n          }\r\n        },\r\n        tabBarActiveTintColor: \"#1DA1F2\",\r\n        tabBarInactiveTintColor: \"gray\",\r\n        headerShown: false,\r\n      })}\r\n    >\r\n      <Tab.Screen name=\"Feed\" component={FeedScreen} />\r\n      <Tab.Screen name=\"Profile\" component={ProfileScreen} />\r\n    </Tab.Navigator>\r\n  )\r\n}\r\n\r\nfunction AppNavigator() {\r\n  const { user } = useAuth()\r\n\r\n  return (\r\n      <Stack.Navigator>\r\n        {!user ? (\r\n          <Stack.Screen name=\"Login\" component={LoginScreen} options={{ headerShown: false }} />\r\n        ) : (\r\n          <>\r\n            <Stack.Screen name=\"HomeTabs\" component={HomeTabs} options={{ headerShown: false }} />\r\n            <Stack.Screen name=\"PostDetail\" component={PostDetailScreen} options={{ title: \"Publicación\" }} />\r\n          </>\r\n        )}\r\n      </Stack.Navigator>\r\n  )\r\n}\r\n\r\nexport default function App() {\r\n  return (\r\n    <SafeAreaProvider>\r\n      <AuthProvider>\r\n        <StatusBar style=\"auto\" />\r\n        <AppNavigator />\r\n      </AuthProvider>\r\n    </SafeAreaProvider>\r\n  )\r\n}\r\n",
    "context": {
      "AuthContext.tsx": "\"use client\"\r\n\r\nimport type React from \"react\"\r\nimport { createContext, useContext, useState, useEffect } from \"react\"\r\n\r\ntype User = {\r\n  id: string\r\n  username: string\r\n  isAdmin: boolean\r\n  avatar: string\r\n}\r\n\r\ntype AuthContextType = {\r\n  user: User | null\r\n  login: (username: string, password: string) => Promise<void>\r\n  logout: () => void\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\r\n\r\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\r\n  const [user, setUser] = useState<User | null>(null)\r\n\r\n  // Simular verificación de sesión al inicio\r\n  useEffect(() => {\r\n    // En una app real, verificaríamos token almacenado\r\n    const checkSession = async () => {\r\n      // Simulamos un usuario ya logueado para desarrollo\r\n      // setUser({\r\n      //   id: '1',\r\n      //   username: 'usuario',\r\n      //   isAdmin: false,\r\n      //   avatar: 'https://randomuser.me/api/portraits/men/32.jpg',\r\n      // });\r\n    }\r\n\r\n    checkSession()\r\n  }, [])\r\n\r\n  const login = async (username: string, password: string) => {\r\n    // Simulación de login\r\n    // En una app real, haríamos una petición a un API\r\n\r\n    if (username === \"admin\" && password === \"admin\") {\r\n      setUser({\r\n        id: \"1\",\r\n        username: \"admin\",\r\n        isAdmin: true,\r\n        avatar: \"https://randomuser.me/api/portraits/men/41.jpg\",\r\n      })\r\n    } else if (username === \"user\" && password === \"user\") {\r\n      setUser({\r\n        id: \"2\",\r\n        username: \"usuario\",\r\n        isAdmin: false,\r\n        avatar: \"https://randomuser.me/api/portraits/men/32.jpg\",\r\n      })\r\n    } else {\r\n      throw new Error(\"Credenciales incorrectas\")\r\n    }\r\n  }\r\n\r\n  const logout = () => {\r\n    setUser(null)\r\n  }\r\n\r\n  return <AuthContext.Provider value={{ user, login, logout }}>{children}</AuthContext.Provider>\r\n}\r\n\r\nexport function useAuth() {\r\n  const context = useContext(AuthContext)\r\n  if (context === undefined) {\r\n    throw new Error(\"useAuth debe ser usado dentro de un AuthProvider\")\r\n  }\r\n  return context\r\n}\r\n\r\nexport default AuthProvider\r\n"
    },
    "data": {
      "mockData.ts": "// Datos de ejemplo para la aplicación\r\n\r\nexport const mockPosts = [\r\n  {\r\n    id: \"post1\",\r\n    author: {\r\n      id: \"admin1\",\r\n      username: \"admin\",\r\n      avatar: \"https://randomuser.me/api/portraits/men/41.jpg\",\r\n      isAdmin: true,\r\n    },\r\n    content:\r\n      \"¡Bienvenidos a nuestra nueva plataforma de microblogging! Estamos emocionados de compartir noticias y actualizaciones con todos ustedes. #NuevoProyecto\",\r\n    image:\r\n      \"https://images.unsplash.com/photo-1611162617213-7d7a39e9b1d7?w=800&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8M3x8dHdpdHRlcnxlbnwwfHwwfHx8MA%3D%3D\",\r\n    createdAt: \"2023-05-15T10:30:00Z\",\r\n    likes: 24,\r\n    comments: 5,\r\n    liked: false,\r\n  },\r\n  {\r\n    id: \"post2\",\r\n    author: {\r\n      id: \"admin1\",\r\n      username: \"admin\",\r\n      avatar: \"https://randomuser.me/api/portraits/men/41.jpg\",\r\n      isAdmin: true,\r\n    },\r\n    content:\r\n      \"Hoy estamos lanzando nuevas funcionalidades en nuestra plataforma. Ahora los usuarios pueden reaccionar y comentar en las publicaciones. ¡Pruébenlo y déjennos saber qué les parece!\",\r\n    createdAt: \"2023-05-16T14:45:00Z\",\r\n    likes: 18,\r\n    comments: 3,\r\n    liked: true,\r\n  },\r\n  {\r\n    id: \"post3\",\r\n    author: {\r\n      id: \"admin2\",\r\n      username: \"moderador\",\r\n      avatar: \"https://randomuser.me/api/portraits/women/41.jpg\",\r\n      isAdmin: true,\r\n    },\r\n    content:\r\n      \"Recordatorio: Mantengan las conversaciones respetuosas. Estamos aquí para crear una comunidad positiva donde todos puedan participar.\",\r\n    image:\r\n      \"https://images.unsplash.com/photo-1611605698335-8b1569810432?w=800&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8dHdpdHRlcnxlbnwwfHwwfHx8MA%3D%3D\",\r\n    createdAt: \"2023-05-17T09:15:00Z\",\r\n    likes: 32,\r\n    comments: 7,\r\n    liked: false,\r\n  },\r\n  {\r\n    id: \"post4\",\r\n    author: {\r\n      id: \"admin1\",\r\n      username: \"admin\",\r\n      avatar: \"https://randomuser.me/api/portraits/men/41.jpg\",\r\n      isAdmin: true,\r\n    },\r\n    content:\r\n      \"¿Qué funcionalidades les gustaría ver en nuestra próxima actualización? Estamos recopilando ideas para mejorar la experiencia de todos.\",\r\n    createdAt: \"2023-05-18T16:20:00Z\",\r\n    likes: 15,\r\n    comments: 12,\r\n    liked: false,\r\n  },\r\n  {\r\n    id: \"post5\",\r\n    author: {\r\n      id: \"admin2\",\r\n      username: \"moderador\",\r\n      avatar: \"https://randomuser.me/api/portraits/women/41.jpg\",\r\n      isAdmin: true,\r\n    },\r\n    content: \"Hoy celebramos nuestro primer mes online. ¡Gracias a todos por ser parte de esta comunidad! #Aniversario\",\r\n    image:\r\n      \"https://images.unsplash.com/photo-1611944212129-29977ae1398c?w=800&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Nnx8dHdpdHRlcnxlbnwwfHwwfHx8MA%3D%3D\",\r\n    createdAt: \"2023-05-19T11:00:00Z\",\r\n    likes: 45,\r\n    comments: 8,\r\n    liked: true,\r\n  },\r\n  {\r\n    id: \"post6\",\r\n    author: {\r\n      id: \"admin1\",\r\n      username: \"admin\",\r\n      avatar: \"https://randomuser.me/api/portraits/men/41.jpg\",\r\n      isAdmin: true,\r\n    },\r\n    content:\r\n      \"Estamos trabajando en mejorar la velocidad de carga de la aplicación. Pronto verán mejoras significativas en el rendimiento.\",\r\n    createdAt: \"2023-05-20T13:40:00Z\",\r\n    likes: 12,\r\n    comments: 2,\r\n    liked: false,\r\n  },\r\n  {\r\n    id: \"post7\",\r\n    author: {\r\n      id: \"admin2\",\r\n      username: \"moderador\",\r\n      avatar: \"https://randomuser.me/api/portraits/women/41.jpg\",\r\n      isAdmin: true,\r\n    },\r\n    content:\r\n      'Nuevo tutorial disponible: \"Cómo sacar el máximo provecho de nuestra plataforma\". Revisa el enlace en nuestro perfil.',\r\n    image:\r\n      \"https://images.unsplash.com/photo-1611162616475-46b635cb6868?w=800&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTB8fHR3aXR0ZXJ8ZW58MHx8MHx8fDA%3D\",\r\n    createdAt: \"2023-05-21T10:10:00Z\",\r\n    likes: 28,\r\n    comments: 4,\r\n    liked: false,\r\n  },\r\n  {\r\n    id: \"post8\",\r\n    author: {\r\n      id: \"admin1\",\r\n      username: \"admin\",\r\n      avatar: \"https://randomuser.me/api/portraits/men/41.jpg\",\r\n      isAdmin: true,\r\n    },\r\n    content:\r\n      \"¡Acabamos de superar los 1000 usuarios! Gracias por confiar en nosotros y ser parte de esta comunidad en crecimiento.\",\r\n    createdAt: \"2023-05-22T15:30:00Z\",\r\n    likes: 56,\r\n    comments: 11,\r\n    liked: true,\r\n  },\r\n  {\r\n    id: \"post9\",\r\n    author: {\r\n      id: \"admin2\",\r\n      username: \"moderador\",\r\n      avatar: \"https://randomuser.me/api/portraits/women/41.jpg\",\r\n      isAdmin: true,\r\n    },\r\n    content:\r\n      \"Recordatorio: Actualicen la aplicación a la última versión para disfrutar de todas las nuevas funcionalidades y correcciones de errores.\",\r\n    createdAt: \"2023-05-23T09:45:00Z\",\r\n    likes: 19,\r\n    comments: 3,\r\n    liked: false,\r\n  },\r\n  {\r\n    id: \"post10\",\r\n    author: {\r\n      id: \"admin1\",\r\n      username: \"admin\",\r\n      avatar: \"https://randomuser.me/api/portraits/men/41.jpg\",\r\n      isAdmin: true,\r\n    },\r\n    content:\r\n      \"Estamos planeando un evento virtual para conectar con nuestra comunidad. ¿Qué temas les gustaría que abordáramos?\",\r\n    image:\r\n      \"https://images.unsplash.com/photo-1611605698323-b1e99cfd37ea?w=800&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8OHx8dHdpdHRlcnxlbnwwfHwwfHx8MA%3D%3D\",\r\n    createdAt: \"2023-05-24T14:20:00Z\",\r\n    likes: 34,\r\n    comments: 15,\r\n    liked: false,\r\n  },\r\n]\r\n\r\nexport const mockComments = [\r\n  {\r\n    id: \"comment1\",\r\n    postId: \"post1\",\r\n    author: {\r\n      id: \"user1\",\r\n      username: \"usuario\",\r\n      avatar: \"https://randomuser.me/api/portraits/men/32.jpg\",\r\n      isAdmin: false,\r\n    },\r\n    content: \"¡Esto es genial! Estoy emocionado de ver cómo evoluciona la plataforma.\",\r\n    createdAt: \"2023-05-15T11:00:00Z\",\r\n  },\r\n  {\r\n    id: \"comment2\",\r\n    postId: \"post1\",\r\n    author: {\r\n      id: \"user2\",\r\n      username: \"maria\",\r\n      avatar: \"https://randomuser.me/api/portraits/women/32.jpg\",\r\n      isAdmin: false,\r\n    },\r\n    content: \"Me encanta el diseño, muy intuitivo y fácil de usar.\",\r\n    createdAt: \"2023-05-15T11:30:00Z\",\r\n  },\r\n  {\r\n    id: \"comment3\",\r\n    postId: \"post1\",\r\n    author: {\r\n      id: \"admin1\",\r\n      username: \"admin\",\r\n      avatar: \"https://randomuser.me/api/portraits/men/41.jpg\",\r\n      isAdmin: true,\r\n    },\r\n    content: \"¡Gracias por sus comentarios! Estamos trabajando duro para mejorar constantemente.\",\r\n    createdAt: \"2023-05-15T12:15:00Z\",\r\n  },\r\n  {\r\n    id: \"comment4\",\r\n    postId: \"post1\",\r\n    author: {\r\n      id: \"user3\",\r\n      username: \"carlos\",\r\n      avatar: \"https://randomuser.me/api/portraits/men/33.jpg\",\r\n      isAdmin: false,\r\n    },\r\n    content: \"¿Habrá una versión para iOS pronto?\",\r\n    createdAt: \"2023-05-15T14:20:00Z\",\r\n  },\r\n  {\r\n    id: \"comment5\",\r\n    postId: \"post1\",\r\n    author: {\r\n      id: \"admin1\",\r\n      username: \"admin\",\r\n      avatar: \"https://randomuser.me/api/portraits/men/41.jpg\",\r\n      isAdmin: true,\r\n    },\r\n    content: \"Sí, estamos trabajando en la versión para iOS. Debería estar disponible en las próximas semanas.\",\r\n    createdAt: \"2023-05-15T15:00:00Z\",\r\n  },\r\n  {\r\n    id: \"comment6\",\r\n    postId: \"post2\",\r\n    author: {\r\n      id: \"user1\",\r\n      username: \"usuario\",\r\n      avatar: \"https://randomuser.me/api/portraits/men/32.jpg\",\r\n      isAdmin: false,\r\n    },\r\n    content: \"Las nuevas funcionalidades son increíbles. Especialmente me gusta poder reaccionar a las publicaciones.\",\r\n    createdAt: \"2023-05-16T15:10:00Z\",\r\n  },\r\n  {\r\n    id: \"comment7\",\r\n    postId: \"post2\",\r\n    author: {\r\n      id: \"user4\",\r\n      username: \"laura\",\r\n      avatar: \"https://randomuser.me/api/portraits/women/33.jpg\",\r\n      isAdmin: false,\r\n    },\r\n    content: \"¿Podrían agregar más tipos de reacciones en el futuro?\",\r\n    createdAt: \"2023-05-16T16:30:00Z\",\r\n  },\r\n  {\r\n    id: \"comment8\",\r\n    postId: \"post2\",\r\n    author: {\r\n      id: \"admin1\",\r\n      username: \"admin\",\r\n      avatar: \"https://randomuser.me/api/portraits/men/41.jpg\",\r\n      isAdmin: true,\r\n    },\r\n    content: \"Definitivamente estamos considerando agregar más tipos de reacciones. ¡Gracias por la sugerencia!\",\r\n    createdAt: \"2023-05-16T17:15:00Z\",\r\n  },\r\n  {\r\n    id: \"comment9\",\r\n    postId: \"post3\",\r\n    author: {\r\n      id: \"user2\",\r\n      username: \"maria\",\r\n      avatar: \"https://randomuser.me/api/portraits/women/32.jpg\",\r\n      isAdmin: false,\r\n    },\r\n    content: \"Totalmente de acuerdo. El respeto es fundamental para mantener una comunidad saludable.\",\r\n    createdAt: \"2023-05-17T09:45:00Z\",\r\n  },\r\n  {\r\n    id: \"comment10\",\r\n    postId: \"post3\",\r\n    author: {\r\n      id: \"user5\",\r\n      username: \"pedro\",\r\n      avatar: \"https://randomuser.me/api/portraits/men/34.jpg\",\r\n      isAdmin: false,\r\n    },\r\n    content: \"¿Tienen alguna política específica sobre el contenido que se puede publicar?\",\r\n    createdAt: \"2023-05-17T10:30:00Z\",\r\n  },\r\n  {\r\n    id: \"comment11\",\r\n    postId: \"post3\",\r\n    author: {\r\n      id: \"admin2\",\r\n      username: \"moderador\",\r\n      avatar: \"https://randomuser.me/api/portraits/women/41.jpg\",\r\n      isAdmin: true,\r\n    },\r\n    content:\r\n      'Sí, tenemos directrices comunitarias detalladas. Puedes encontrarlas en la sección de \"Acerca de\" en nuestro perfil.',\r\n    createdAt: \"2023-05-17T11:00:00Z\",\r\n  },\r\n  {\r\n    id: \"comment12\",\r\n    postId: \"post4\",\r\n    author: {\r\n      id: \"user1\",\r\n      username: \"usuario\",\r\n      avatar: \"https://randomuser.me/api/portraits/men/32.jpg\",\r\n      isAdmin: false,\r\n    },\r\n    content: \"Me gustaría ver una función para guardar publicaciones favoritas.\",\r\n    createdAt: \"2023-05-18T16:45:00Z\",\r\n  },\r\n  {\r\n    id: \"comment13\",\r\n    postId: \"post4\",\r\n    author: {\r\n      id: \"user3\",\r\n      username: \"carlos\",\r\n      avatar: \"https://randomuser.me/api/portraits/men/33.jpg\",\r\n      isAdmin: false,\r\n    },\r\n    content: \"Sería genial tener notificaciones personalizables.\",\r\n    createdAt: \"2023-05-18T17:20:00Z\",\r\n  },\r\n  {\r\n    id: \"comment14\",\r\n    postId: \"post4\",\r\n    author: {\r\n      id: \"user4\",\r\n      username: \"laura\",\r\n      avatar: \"https://randomuser.me/api/portraits/women/33.jpg\",\r\n      isAdmin: false,\r\n    },\r\n    content: \"¿Qué tal una función para programar publicaciones? Sería útil para los administradores.\",\r\n    createdAt: \"2023-05-18T18:10:00Z\",\r\n  },\r\n  {\r\n    id: \"comment15\",\r\n    postId: \"post5\",\r\n    author: {\r\n      id: \"user2\",\r\n      username: \"maria\",\r\n      avatar: \"https://randomuser.me/api/portraits/women/32.jpg\",\r\n      isAdmin: false,\r\n    },\r\n    content: \"¡Felicidades por el primer mes! Ha sido una gran experiencia hasta ahora.\",\r\n    createdAt: \"2023-05-19T11:30:00Z\",\r\n  },\r\n]\r\nexport default { mockPosts, mockComments }"
    }
  },
  "components": {
    "Collapsible.tsx": "import { PropsWithChildren, useState } from 'react';\r\nimport { StyleSheet, TouchableOpacity } from 'react-native';\r\n\r\nimport { ThemedText } from '@/components/ThemedText';\r\nimport { ThemedView } from '@/components/ThemedView';\r\nimport { IconSymbol } from '@/components/ui/IconSymbol';\r\nimport { Colors } from '@/constants/Colors';\r\nimport { useColorScheme } from '@/hooks/useColorScheme';\r\n\r\nexport function Collapsible({ children, title }: PropsWithChildren & { title: string }) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const theme = useColorScheme() ?? 'light';\r\n\r\n  return (\r\n    <ThemedView>\r\n      <TouchableOpacity\r\n        style={styles.heading}\r\n        onPress={() => setIsOpen((value) => !value)}\r\n        activeOpacity={0.8}>\r\n        <IconSymbol\r\n          name=\"chevron.right\"\r\n          size={18}\r\n          weight=\"medium\"\r\n          color={theme === 'light' ? Colors.light.icon : Colors.dark.icon}\r\n          style={{ transform: [{ rotate: isOpen ? '90deg' : '0deg' }] }}\r\n        />\r\n\r\n        <ThemedText type=\"defaultSemiBold\">{title}</ThemedText>\r\n      </TouchableOpacity>\r\n      {isOpen && <ThemedView style={styles.content}>{children}</ThemedView>}\r\n    </ThemedView>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  heading: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    gap: 6,\r\n  },\r\n  content: {\r\n    marginTop: 6,\r\n    marginLeft: 24,\r\n  },\r\n});\r\n",
    "Comment.tsx": "\"use client\"\r\nimport { View, Text, Image, StyleSheet } from \"react-native\"\r\nimport { useAuth } from \"@/app/context/AuthContext\"\r\n\r\ntype CommentProps = {\r\n  comment: {\r\n    id: string\r\n    author: {\r\n      id: string\r\n      username: string\r\n      avatar: string\r\n      isAdmin: boolean\r\n    }\r\n    content: string\r\n    createdAt: string\r\n  }\r\n}\r\n\r\nexport default function Comment({ comment }: CommentProps) {\r\n  const { user } = useAuth()\r\n\r\n  const formatDate = (dateString: string) => {\r\n    const date = new Date(dateString)\r\n    return date.toLocaleDateString(\"es-ES\", {\r\n      day: \"numeric\",\r\n      month: \"short\",\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\",\r\n    })\r\n  }\r\n\r\n  const isCurrentUser = user?.id === comment.author.id\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Image source={{ uri: comment.author.avatar }} style={styles.avatar} />\r\n      <View style={styles.commentContent}>\r\n        <View style={styles.header}>\r\n          <View style={styles.nameContainer}>\r\n            <Text style={styles.username}>{comment.author.username}</Text>\r\n            {comment.author.isAdmin && (\r\n              <View style={styles.adminBadge}>\r\n                <Text style={styles.adminText}>Admin</Text>\r\n              </View>\r\n            )}\r\n            {isCurrentUser && (\r\n              <View style={styles.userBadge}>\r\n                <Text style={styles.userText}>Tú</Text>\r\n              </View>\r\n            )}\r\n          </View>\r\n          <Text style={styles.date}>{formatDate(comment.createdAt)}</Text>\r\n        </View>\r\n        <Text style={styles.content}>{comment.content}</Text>\r\n      </View>\r\n    </View>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flexDirection: \"row\",\r\n    paddingVertical: 10,\r\n    paddingHorizontal: 15,\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: \"#E1E8ED\",\r\n  },\r\n  avatar: {\r\n    width: 35,\r\n    height: 35,\r\n    borderRadius: 17.5,\r\n    marginRight: 10,\r\n  },\r\n  commentContent: {\r\n    flex: 1,\r\n  },\r\n  header: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    marginBottom: 5,\r\n  },\r\n  nameContainer: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n  },\r\n  username: {\r\n    fontWeight: \"bold\",\r\n    fontSize: 14,\r\n    marginRight: 5,\r\n  },\r\n  adminBadge: {\r\n    backgroundColor: \"#1DA1F2\",\r\n    borderRadius: 4,\r\n    paddingHorizontal: 5,\r\n    paddingVertical: 2,\r\n    marginRight: 5,\r\n  },\r\n  adminText: {\r\n    color: \"white\",\r\n    fontSize: 10,\r\n    fontWeight: \"bold\",\r\n  },\r\n  userBadge: {\r\n    backgroundColor: \"#657786\",\r\n    borderRadius: 4,\r\n    paddingHorizontal: 5,\r\n    paddingVertical: 2,\r\n  },\r\n  userText: {\r\n    color: \"white\",\r\n    fontSize: 10,\r\n    fontWeight: \"bold\",\r\n  },\r\n  date: {\r\n    color: \"#657786\",\r\n    fontSize: 12,\r\n  },\r\n  content: {\r\n    fontSize: 14,\r\n    lineHeight: 20,\r\n  },\r\n})\r\n",
    "ExternalLink.tsx": "import { Href, Link } from 'expo-router';\r\nimport { openBrowserAsync } from 'expo-web-browser';\r\nimport { type ComponentProps } from 'react';\r\nimport { Platform } from 'react-native';\r\n\r\ntype Props = Omit<ComponentProps<typeof Link>, 'href'> & { href: Href & string };\r\n\r\nexport function ExternalLink({ href, ...rest }: Props) {\r\n  return (\r\n    <Link\r\n      target=\"_blank\"\r\n      {...rest}\r\n      href={href}\r\n      onPress={async (event) => {\r\n        if (Platform.OS !== 'web') {\r\n          // Prevent the default behavior of linking to the default browser on native.\r\n          event.preventDefault();\r\n          // Open the link in an in-app browser.\r\n          await openBrowserAsync(href);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n",
    "HapticTab.tsx": "import { BottomTabBarButtonProps } from '@react-navigation/bottom-tabs';\r\nimport { PlatformPressable } from '@react-navigation/elements';\r\nimport * as Haptics from 'expo-haptics';\r\n\r\nexport function HapticTab(props: BottomTabBarButtonProps) {\r\n  return (\r\n    <PlatformPressable\r\n      {...props}\r\n      onPressIn={(ev) => {\r\n        if (process.env.EXPO_OS === 'ios') {\r\n          // Add a soft haptic feedback when pressing down on the tabs.\r\n          Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\r\n        }\r\n        props.onPressIn?.(ev);\r\n      }}\r\n    />\r\n  );\r\n}\r\n",
    "HelloWave.tsx": "import { useEffect } from 'react';\r\nimport { StyleSheet } from 'react-native';\r\nimport Animated, {\r\n  useAnimatedStyle,\r\n  useSharedValue,\r\n  withRepeat,\r\n  withSequence,\r\n  withTiming,\r\n} from 'react-native-reanimated';\r\n\r\nimport { ThemedText } from '@/components/ThemedText';\r\n\r\nexport function HelloWave() {\r\n  const rotationAnimation = useSharedValue(0);\r\n\r\n  useEffect(() => {\r\n    rotationAnimation.value = withRepeat(\r\n      withSequence(withTiming(25, { duration: 150 }), withTiming(0, { duration: 150 })),\r\n      4 // Run the animation 4 times\r\n    );\r\n  }, [rotationAnimation]);\r\n\r\n  const animatedStyle = useAnimatedStyle(() => ({\r\n    transform: [{ rotate: `${rotationAnimation.value}deg` }],\r\n  }));\r\n\r\n  return (\r\n    <Animated.View style={animatedStyle}>\r\n      <ThemedText style={styles.text}>👋</ThemedText>\r\n    </Animated.View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  text: {\r\n    fontSize: 28,\r\n    lineHeight: 32,\r\n    marginTop: -6,\r\n  },\r\n});\r\n",
    "ParallaxScrollView.tsx": "import type { PropsWithChildren, ReactElement } from 'react';\r\nimport { StyleSheet } from 'react-native';\r\nimport Animated, {\r\n  interpolate,\r\n  useAnimatedRef,\r\n  useAnimatedStyle,\r\n  useScrollViewOffset,\r\n} from 'react-native-reanimated';\r\n\r\nimport { ThemedView } from '@/components/ThemedView';\r\nimport { useBottomTabOverflow } from '@/components/ui/TabBarBackground';\r\nimport { useColorScheme } from '@/hooks/useColorScheme';\r\n\r\nconst HEADER_HEIGHT = 250;\r\n\r\ntype Props = PropsWithChildren<{\r\n  headerImage: ReactElement;\r\n  headerBackgroundColor: { dark: string; light: string };\r\n}>;\r\n\r\nexport default function ParallaxScrollView({\r\n  children,\r\n  headerImage,\r\n  headerBackgroundColor,\r\n}: Props) {\r\n  const colorScheme = useColorScheme() ?? 'light';\r\n  const scrollRef = useAnimatedRef<Animated.ScrollView>();\r\n  const scrollOffset = useScrollViewOffset(scrollRef);\r\n  const bottom = useBottomTabOverflow();\r\n  const headerAnimatedStyle = useAnimatedStyle(() => {\r\n    return {\r\n      transform: [\r\n        {\r\n          translateY: interpolate(\r\n            scrollOffset.value,\r\n            [-HEADER_HEIGHT, 0, HEADER_HEIGHT],\r\n            [-HEADER_HEIGHT / 2, 0, HEADER_HEIGHT * 0.75]\r\n          ),\r\n        },\r\n        {\r\n          scale: interpolate(scrollOffset.value, [-HEADER_HEIGHT, 0, HEADER_HEIGHT], [2, 1, 1]),\r\n        },\r\n      ],\r\n    };\r\n  });\r\n\r\n  return (\r\n    <ThemedView style={styles.container}>\r\n      <Animated.ScrollView\r\n        ref={scrollRef}\r\n        scrollEventThrottle={16}\r\n        scrollIndicatorInsets={{ bottom }}\r\n        contentContainerStyle={{ paddingBottom: bottom }}>\r\n        <Animated.View\r\n          style={[\r\n            styles.header,\r\n            { backgroundColor: headerBackgroundColor[colorScheme] },\r\n            headerAnimatedStyle,\r\n          ]}>\r\n          {headerImage}\r\n        </Animated.View>\r\n        <ThemedView style={styles.content}>{children}</ThemedView>\r\n      </Animated.ScrollView>\r\n    </ThemedView>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  header: {\r\n    height: HEADER_HEIGHT,\r\n    overflow: 'hidden',\r\n  },\r\n  content: {\r\n    flex: 1,\r\n    padding: 32,\r\n    gap: 16,\r\n    overflow: 'hidden',\r\n  },\r\n});\r\n",
    "Post.tsx": "\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport { View, Text, Image, StyleSheet, TouchableOpacity } from \"react-native\";\r\nimport { Heart, MessageCircle, MoreHorizontal } from \"lucide-react-native\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport { useAuth } from \"@/app/context/AuthContext\";\r\n\r\ntype PostProps = {\r\n\tpost: {\r\n\t\tid: string;\r\n\t\tauthor: {\r\n\t\t\tid: string;\r\n\t\t\tusername: string;\r\n\t\t\tavatar: string;\r\n\t\t\tisAdmin: boolean;\r\n\t\t};\r\n\t\tcontent: string;\r\n\t\timage?: string;\r\n\t\tcreatedAt: string;\r\n\t\tlikes: number;\r\n\t\tcomments: number;\r\n\t\tliked: boolean;\r\n\t};\r\n\tonLike: (id: string) => void;\r\n};\r\n\r\nexport default function Post({ post, onLike }: PostProps) {\r\n\tconst navigation = useNavigation();\r\n\tconst { user } = useAuth();\r\n\tconst [liked, setLiked] = useState(post.liked);\r\n\tconst [likesCount, setLikesCount] = useState(post.likes);\r\n\r\n\tconst handleLike = () => {\r\n\t\tsetLiked(!liked);\r\n\t\tsetLikesCount(liked ? likesCount - 1 : likesCount + 1);\r\n\t\tonLike(post.id);\r\n\t};\r\n\r\n\tconst handleCommentPress = () => {\r\n\t\t// @ts-ignore - Navegación tipada requeriría más configuración\r\n\t\tnavigation.navigate(\"PostDetail\", { postId: post.id });\r\n\t};\r\n\r\n\tconst formatDate = (dateString: string) => {\r\n\t\tconst date = new Date(dateString);\r\n\t\treturn date.toLocaleDateString(\"es-ES\", {\r\n\t\t\tday: \"numeric\",\r\n\t\t\tmonth: \"short\",\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<View style={styles.container}>\r\n\t\t\t<View style={styles.header}>\r\n\t\t\t\t<View style={styles.userInfo}>\r\n\t\t\t\t\t<Image source={{ uri: post.author.avatar }} style={styles.avatar} />\r\n\t\t\t\t\t<View>\r\n\t\t\t\t\t\t<View style={styles.nameContainer}>\r\n\t\t\t\t\t\t\t<Text style={styles.username}>{post.author.username}</Text>\r\n\t\t\t\t\t\t\t{post.author.isAdmin && (\r\n\t\t\t\t\t\t\t\t<View style={styles.adminBadge}>\r\n\t\t\t\t\t\t\t\t\t<Text style={styles.adminText}>Admin</Text>\r\n\t\t\t\t\t\t\t\t</View>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</View>\r\n\t\t\t\t\t\t<Text style={styles.date}>{formatDate(post.createdAt)}</Text>\r\n\t\t\t\t\t</View>\r\n\t\t\t\t</View>\r\n\t\t\t\t<TouchableOpacity>\r\n\t\t\t\t\t<MoreHorizontal size={18} color=\"#657786\" />\r\n\t\t\t\t</TouchableOpacity>\r\n\t\t\t</View>\r\n\r\n\t\t\t<View style={styles.content}>\r\n\t\t\t\t<Text style={styles.contentText}>{post.content}</Text>\r\n\t\t\t\t{post.image && (\r\n\t\t\t\t\t<Image\r\n\t\t\t\t\t\tsource={{ uri: post.image }}\r\n\t\t\t\t\t\tstyle={styles.contentImage}\r\n\t\t\t\t\t\tresizeMode=\"cover\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t</View>\r\n\r\n\t\t\t<View style={styles.actions}>\r\n\t\t\t\t<TouchableOpacity style={styles.actionButton} onPress={handleLike}>\r\n\t\t\t\t\t<Heart\r\n\t\t\t\t\t\tsize={18}\r\n\t\t\t\t\t\tcolor={liked ? \"#E0245E\" : \"#657786\"}\r\n\t\t\t\t\t\tfill={liked ? \"#E0245E\" : \"transparent\"}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{likesCount > 0 && (\r\n\t\t\t\t\t\t<Text style={[styles.actionText, liked && styles.likedText]}>\r\n\t\t\t\t\t\t\t{likesCount}\r\n\t\t\t\t\t\t</Text>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</TouchableOpacity>\r\n\r\n\t\t\t\t<TouchableOpacity\r\n\t\t\t\t\tstyle={styles.actionButton}\r\n\t\t\t\t\tonPress={handleCommentPress}\r\n\t\t\t\t>\r\n\t\t\t\t\t<MessageCircle size={18} color=\"#657786\" />\r\n\t\t\t\t\t{post.comments > 0 && (\r\n\t\t\t\t\t\t<Text style={styles.actionText}>{post.comments}</Text>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</TouchableOpacity>\r\n\t\t\t</View>\r\n\t\t</View>\r\n\t);\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n\tcontainer: {\r\n\t\tbackgroundColor: \"white\",\r\n\t\tborderBottomWidth: 1,\r\n\t\tborderBottomColor: \"#E1E8ED\",\r\n\t\tpadding: 15,\r\n\t},\r\n\theader: {\r\n\t\tflexDirection: \"row\",\r\n\t\tjustifyContent: \"space-between\",\r\n\t\talignItems: \"flex-start\",\r\n\t\tmarginBottom: 10,\r\n\t},\r\n\tuserInfo: {\r\n\t\tflexDirection: \"row\",\r\n\t\talignItems: \"center\",\r\n\t},\r\n\tavatar: {\r\n\t\twidth: 40,\r\n\t\theight: 40,\r\n\t\tborderRadius: 20,\r\n\t\tmarginRight: 10,\r\n\t},\r\n\tnameContainer: {\r\n\t\tflexDirection: \"row\",\r\n\t\talignItems: \"center\",\r\n\t},\r\n\tusername: {\r\n\t\tfontWeight: \"bold\",\r\n\t\tfontSize: 15,\r\n\t\tmarginRight: 5,\r\n\t},\r\n\tadminBadge: {\r\n\t\tbackgroundColor: \"#1DA1F2\",\r\n\t\tborderRadius: 4,\r\n\t\tpaddingHorizontal: 5,\r\n\t\tpaddingVertical: 2,\r\n\t},\r\n\tadminText: {\r\n\t\tcolor: \"white\",\r\n\t\tfontSize: 10,\r\n\t\tfontWeight: \"bold\",\r\n\t},\r\n\tdate: {\r\n\t\tcolor: \"#657786\",\r\n\t\tfontSize: 12,\r\n\t},\r\n\tcontent: {\r\n\t\tmarginBottom: 10,\r\n\t},\r\n\tcontentText: {\r\n\t\tfontSize: 15,\r\n\t\tlineHeight: 22,\r\n\t\tmarginBottom: 10,\r\n\t},\r\n\tcontentImage: {\r\n\t\twidth: \"100%\",\r\n\t\theight: 200,\r\n\t\tborderRadius: 10,\r\n\t},\r\n\tactions: {\r\n\t\tflexDirection: \"row\",\r\n\t\tmarginTop: 10,\r\n\t},\r\n\tactionButton: {\r\n\t\tflexDirection: \"row\",\r\n\t\talignItems: \"center\",\r\n\t\tmarginRight: 20,\r\n\t},\r\n\tactionText: {\r\n\t\tmarginLeft: 5,\r\n\t\tfontSize: 13,\r\n\t\tcolor: \"#657786\",\r\n\t},\r\n\tlikedText: {\r\n\t\tcolor: \"#E0245E\",\r\n\t},\r\n});\r\n",
    "ThemedText.tsx": "import { StyleSheet, Text, type TextProps } from 'react-native';\r\n\r\nimport { useThemeColor } from '@/hooks/useThemeColor';\r\n\r\nexport type ThemedTextProps = TextProps & {\r\n  lightColor?: string;\r\n  darkColor?: string;\r\n  type?: 'default' | 'title' | 'defaultSemiBold' | 'subtitle' | 'link';\r\n};\r\n\r\nexport function ThemedText({\r\n  style,\r\n  lightColor,\r\n  darkColor,\r\n  type = 'default',\r\n  ...rest\r\n}: ThemedTextProps) {\r\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\r\n\r\n  return (\r\n    <Text\r\n      style={[\r\n        { color },\r\n        type === 'default' ? styles.default : undefined,\r\n        type === 'title' ? styles.title : undefined,\r\n        type === 'defaultSemiBold' ? styles.defaultSemiBold : undefined,\r\n        type === 'subtitle' ? styles.subtitle : undefined,\r\n        type === 'link' ? styles.link : undefined,\r\n        style,\r\n      ]}\r\n      {...rest}\r\n    />\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  default: {\r\n    fontSize: 16,\r\n    lineHeight: 24,\r\n  },\r\n  defaultSemiBold: {\r\n    fontSize: 16,\r\n    lineHeight: 24,\r\n    fontWeight: '600',\r\n  },\r\n  title: {\r\n    fontSize: 32,\r\n    fontWeight: 'bold',\r\n    lineHeight: 32,\r\n  },\r\n  subtitle: {\r\n    fontSize: 20,\r\n    fontWeight: 'bold',\r\n  },\r\n  link: {\r\n    lineHeight: 30,\r\n    fontSize: 16,\r\n    color: '#0a7ea4',\r\n  },\r\n});\r\n",
    "ThemedView.tsx": "import { View, type ViewProps } from 'react-native';\r\n\r\nimport { useThemeColor } from '@/hooks/useThemeColor';\r\n\r\nexport type ThemedViewProps = ViewProps & {\r\n  lightColor?: string;\r\n  darkColor?: string;\r\n};\r\n\r\nexport function ThemedView({ style, lightColor, darkColor, ...otherProps }: ThemedViewProps) {\r\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\r\n\r\n  return <View style={[{ backgroundColor }, style]} {...otherProps} />;\r\n}\r\n",
    "ui": {
      "IconSymbol.ios.tsx": "import { SymbolView, SymbolViewProps, SymbolWeight } from 'expo-symbols';\r\nimport { StyleProp, ViewStyle } from 'react-native';\r\n\r\nexport function IconSymbol({\r\n  name,\r\n  size = 24,\r\n  color,\r\n  style,\r\n  weight = 'regular',\r\n}: {\r\n  name: SymbolViewProps['name'];\r\n  size?: number;\r\n  color: string;\r\n  style?: StyleProp<ViewStyle>;\r\n  weight?: SymbolWeight;\r\n}) {\r\n  return (\r\n    <SymbolView\r\n      weight={weight}\r\n      tintColor={color}\r\n      resizeMode=\"scaleAspectFit\"\r\n      name={name}\r\n      style={[\r\n        {\r\n          width: size,\r\n          height: size,\r\n        },\r\n        style,\r\n      ]}\r\n    />\r\n  );\r\n}\r\n",
      "IconSymbol.tsx": "// Fallback for using MaterialIcons on Android and web.\r\n\r\nimport MaterialIcons from '@expo/vector-icons/MaterialIcons';\r\nimport { SymbolWeight, SymbolViewProps } from 'expo-symbols';\r\nimport { ComponentProps } from 'react';\r\nimport { OpaqueColorValue, type StyleProp, type TextStyle } from 'react-native';\r\n\r\ntype IconMapping = Record<SymbolViewProps['name'], ComponentProps<typeof MaterialIcons>['name']>;\r\ntype IconSymbolName = keyof typeof MAPPING;\r\n\r\n/**\r\n * Add your SF Symbols to Material Icons mappings here.\r\n * - see Material Icons in the [Icons Directory](https://icons.expo.fyi).\r\n * - see SF Symbols in the [SF Symbols](https://developer.apple.com/sf-symbols/) app.\r\n */\r\nconst MAPPING = {\r\n  'house.fill': 'home',\r\n  'paperplane.fill': 'send',\r\n  'chevron.left.forwardslash.chevron.right': 'code',\r\n  'chevron.right': 'chevron-right',\r\n} as IconMapping;\r\n\r\n/**\r\n * An icon component that uses native SF Symbols on iOS, and Material Icons on Android and web.\r\n * This ensures a consistent look across platforms, and optimal resource usage.\r\n * Icon `name`s are based on SF Symbols and require manual mapping to Material Icons.\r\n */\r\nexport function IconSymbol({\r\n  name,\r\n  size = 24,\r\n  color,\r\n  style,\r\n}: {\r\n  name: IconSymbolName;\r\n  size?: number;\r\n  color: string | OpaqueColorValue;\r\n  style?: StyleProp<TextStyle>;\r\n  weight?: SymbolWeight;\r\n}) {\r\n  return <MaterialIcons color={color} size={size} name={MAPPING[name]} style={style} />;\r\n}\r\n",
      "TabBarBackground.ios.tsx": "import { useBottomTabBarHeight } from '@react-navigation/bottom-tabs';\r\nimport { BlurView } from 'expo-blur';\r\nimport { StyleSheet } from 'react-native';\r\n\r\nexport default function BlurTabBarBackground() {\r\n  return (\r\n    <BlurView\r\n      // System chrome material automatically adapts to the system's theme\r\n      // and matches the native tab bar appearance on iOS.\r\n      tint=\"systemChromeMaterial\"\r\n      intensity={100}\r\n      style={StyleSheet.absoluteFill}\r\n    />\r\n  );\r\n}\r\n\r\nexport function useBottomTabOverflow() {\r\n  return useBottomTabBarHeight();\r\n}\r\n",
      "TabBarBackground.tsx": "// This is a shim for web and Android where the tab bar is generally opaque.\r\nexport default undefined;\r\n\r\nexport function useBottomTabOverflow() {\r\n  return 0;\r\n}\r\n"
    }
  },
  "constants": {
    "Colors.ts": "const tintColorLight = '#0a7ea4';\r\nconst tintColorDark = '#fff';\r\n\r\nexport const Colors = {\r\n  light: {\r\n    text: '#11181C',\r\n    background: '#fff',\r\n    tint: tintColorLight,\r\n    icon: '#687076',\r\n    tabIconDefault: '#687076',\r\n    tabIconSelected: tintColorLight,\r\n  },\r\n  dark: {\r\n    text: '#ECEDEE',\r\n    background: '#151718',\r\n    tint: tintColorDark,\r\n    icon: '#9BA1A6',\r\n    tabIconDefault: '#9BA1A6',\r\n    tabIconSelected: tintColorDark,\r\n  },\r\n};\r\n"
  },
  "hooks": {
    "useColorScheme.ts": "export { useColorScheme } from 'react-native';\r\n",
    "useColorScheme.web.ts": "import { useEffect, useState } from 'react';\r\nimport { useColorScheme as useRNColorScheme } from 'react-native';\r\n\r\n/**\r\n * To support static rendering, this value needs to be re-calculated on the client side for web\r\n */\r\nexport function useColorScheme() {\r\n  const [hasHydrated, setHasHydrated] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setHasHydrated(true);\r\n  }, []);\r\n\r\n  const colorScheme = useRNColorScheme();\r\n\r\n  if (hasHydrated) {\r\n    return colorScheme;\r\n  }\r\n\r\n  return 'light';\r\n}\r\n",
    "useThemeColor.ts": "/**\r\n * Learn more about light and dark modes:\r\n * https://docs.expo.dev/guides/color-schemes/\r\n */\r\n\r\nimport { Colors } from '@/constants/Colors';\r\nimport { useColorScheme } from '@/hooks/useColorScheme';\r\n\r\nexport function useThemeColor(\r\n  props: { light?: string; dark?: string },\r\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\r\n) {\r\n  const theme = useColorScheme() ?? 'light';\r\n  const colorFromProps = props[theme];\r\n\r\n  if (colorFromProps) {\r\n    return colorFromProps;\r\n  }\r\n  return Colors[theme][colorName];\r\n}\r\n"
  },
  "navigation": {
    "Main.tsx": "\"use client\"\r\nimport { NavigationContainer } from \"@react-navigation/native\"\r\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\"\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\"\r\nimport { SafeAreaProvider } from \"react-native-safe-area-context\"\r\nimport { StatusBar } from \"expo-status-bar\"\r\nimport { Home, User } from \"lucide-react-native\"\r\n\r\n// Screens\r\nimport FeedScreen from \"@/screens/FeedScreen\"\r\nimport ProfileScreen from \"@/screens/ProfileScreen\"\r\nimport PostDetailScreen from \"@/screens/PostDetailScreen\"\r\nimport LoginScreen from \"@/screens/LoginScreen\"\r\n\r\n// Context\r\nimport { AuthProvider, useAuth } from \"@/app/context/AuthContext\"\r\n\r\nconst Tab = createBottomTabNavigator()\r\nconst Stack = createNativeStackNavigator()\r\n\r\nfunction HomeTabs() {\r\n    return (\r\n        <Tab.Navigator\r\n            screenOptions={({ route }) => ({\r\n                tabBarIcon: ({ color, size }) => {\r\n                    if (route.name === \"Feed\") {\r\n                        return <Home size={size} color={color} />\r\n                    } else if (route.name === \"Profile\") {\r\n                        return <User size={size} color={color} />\r\n                    }\r\n                },\r\n                tabBarActiveTintColor: \"#1DA1F2\",\r\n                tabBarInactiveTintColor: \"gray\",\r\n                headerShown: false,\r\n            })}\r\n        >\r\n            <Tab.Screen name=\"Feed\" component={FeedScreen} />\r\n            <Tab.Screen name=\"Profile\" component={ProfileScreen} />\r\n        </Tab.Navigator>\r\n    )\r\n}\r\n\r\nfunction AppNavigator() {\r\n    const { user } = useAuth()\r\n\r\n    return (\r\n        <Stack.Navigator>\r\n            {!user ? (\r\n                <Stack.Screen name=\"Login\" component={LoginScreen} options={{ headerShown: false }} />\r\n            ) : (\r\n                <>\r\n                    <Stack.Screen name=\"HomeTabs\" component={HomeTabs} options={{ headerShown: false }} />\r\n                    <Stack.Screen name=\"PostDetail\" component={PostDetailScreen} options={{ title: \"Publicación\" }} />\r\n                </>\r\n            )}\r\n        </Stack.Navigator>\r\n    )\r\n}\r\n\r\nexport default function App() {\r\n    return (\r\n        <SafeAreaProvider>\r\n            <AuthProvider>\r\n                <StatusBar style=\"auto\" />\r\n                <AppNavigator />\r\n            </AuthProvider>\r\n        </SafeAreaProvider>\r\n    )\r\n}\r\n"
  },
  "screens": {
    "FeedScreen.tsx": "\"use client\"\r\n\r\nimport { useState, useEffect, useCallback } from \"react\"\r\nimport { View, FlatList, StyleSheet, RefreshControl, ActivityIndicator, Text, TouchableOpacity } from \"react-native\"\r\nimport { SafeAreaView } from \"react-native-safe-area-context\"\r\nimport { Plus } from \"lucide-react-native\"\r\nimport Post from \"../components/Post\"\r\nimport { useAuth } from \"@/app/context/AuthContext\"\r\nimport { mockPosts } from \"@/app/data/mockData\"\r\n\r\nexport default function FeedScreen({ navigation }: any) {\r\n  const { user } = useAuth()\r\n  const [posts, setPosts] = useState<any[]>([])\r\n  const [refreshing, setRefreshing] = useState(false)\r\n  const [loading, setLoading] = useState(true)\r\n  const [page, setPage] = useState(1)\r\n  const [hasMore, setHasMore] = useState(true)\r\n\r\n  // Simular carga de posts\r\n  const fetchPosts = useCallback(async (pageNum = 1, refresh = false) => {\r\n    // En una app real, haríamos una petición a un API\r\n    // Simulamos delay de red\r\n    await new Promise((resolve) => setTimeout(resolve, 1000))\r\n\r\n    const postsPerPage = 5\r\n    const start = (pageNum - 1) * postsPerPage\r\n    const end = start + postsPerPage\r\n    const newPosts = mockPosts.slice(start, end)\r\n\r\n    if (refresh) {\r\n      setPosts(newPosts)\r\n    } else {\r\n      setPosts((prev) => [...prev, ...newPosts])\r\n    }\r\n\r\n    setHasMore(end < mockPosts.length)\r\n    setLoading(false)\r\n    setRefreshing(false)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    fetchPosts()\r\n  }, [fetchPosts])\r\n\r\n  const handleRefresh = () => {\r\n    setRefreshing(true)\r\n    setPage(1)\r\n    fetchPosts(1, true)\r\n  }\r\n\r\n  const handleLoadMore = () => {\r\n    if (!loading && hasMore) {\r\n      setLoading(true)\r\n      const nextPage = page + 1\r\n      setPage(nextPage)\r\n      fetchPosts(nextPage)\r\n    }\r\n  }\r\n\r\n  const handleLike = (postId: string) => {\r\n    // En una app real, enviaríamos esta acción al servidor\r\n    console.log(`Post ${postId} liked/unliked`)\r\n  }\r\n\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <View style={styles.header}>\r\n        <Text style={styles.headerTitle}>MicroBlog</Text>\r\n      </View>\r\n\r\n      <FlatList\r\n        data={posts}\r\n        renderItem={({ item }) => <Post post={item} onLike={handleLike} />}\r\n        keyExtractor={(item) => item.id}\r\n        refreshControl={<RefreshControl refreshing={refreshing} onRefresh={handleRefresh} />}\r\n        onEndReached={handleLoadMore}\r\n        onEndReachedThreshold={0.5}\r\n        ListFooterComponent={\r\n          loading && !refreshing ? (\r\n            <View style={styles.loader}>\r\n              <ActivityIndicator size=\"small\" color=\"#1DA1F2\" />\r\n            </View>\r\n          ) : null\r\n        }\r\n        ListEmptyComponent={\r\n          !loading ? (\r\n            <View style={styles.emptyContainer}>\r\n              <Text style={styles.emptyText}>No hay publicaciones disponibles</Text>\r\n            </View>\r\n          ) : null\r\n        }\r\n      />\r\n\r\n      {user?.isAdmin && (\r\n        <TouchableOpacity\r\n          style={styles.fab}\r\n          onPress={() => {\r\n            // En una app real, navegaríamos a la pantalla de crear post\r\n            alert(\"Función para crear post (solo disponible para administradores)\")\r\n          }}\r\n        >\r\n          <Plus size={24} color=\"white\" />\r\n        </TouchableOpacity>\r\n      )}\r\n    </SafeAreaView>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#f5f8fa\",\r\n  },\r\n  header: {\r\n    backgroundColor: \"white\",\r\n    paddingVertical: 10,\r\n    paddingHorizontal: 15,\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: \"#E1E8ED\",\r\n  },\r\n  headerTitle: {\r\n    fontSize: 18,\r\n    fontWeight: \"bold\",\r\n    color: \"#1DA1F2\",\r\n  },\r\n  loader: {\r\n    padding: 20,\r\n    alignItems: \"center\",\r\n  },\r\n  emptyContainer: {\r\n    padding: 20,\r\n    alignItems: \"center\",\r\n  },\r\n  emptyText: {\r\n    color: \"#657786\",\r\n  },\r\n  fab: {\r\n    position: \"absolute\",\r\n    bottom: 20,\r\n    right: 20,\r\n    width: 56,\r\n    height: 56,\r\n    borderRadius: 28,\r\n    backgroundColor: \"#1DA1F2\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    elevation: 5,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.25,\r\n    shadowRadius: 3.84,\r\n  },\r\n})\r\n",
    "LoginScreen.tsx": "\"use client\"\r\n\r\nimport { useState } from \"react\"\r\nimport { View, Text, TextInput, TouchableOpacity, StyleSheet, Alert, Image } from \"react-native\"\r\nimport { useAuth } from \"@/app/context/AuthContext\"\r\n\r\nexport default function LoginScreen() {\r\n  const [username, setUsername] = useState(\"\")\r\n  const [password, setPassword] = useState(\"\")\r\n  const [loading, setLoading] = useState(false)\r\n  const { login } = useAuth()\r\n\r\n  const handleLogin = async () => {\r\n    if (!username || !password) {\r\n      Alert.alert(\"Error\", \"Por favor ingresa usuario y contraseña\")\r\n      return\r\n    }\r\n\r\n    setLoading(true)\r\n    try {\r\n      await login(username, password)\r\n    } catch (error) {\r\n      Alert.alert(\"Error\", \"Credenciales incorrectas\")\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.logoContainer}>\r\n        <Image source={{ uri: \"https://cdn-icons-png.flaticon.com/512/733/733579.png\" }} style={styles.logo} />\r\n        <Text style={styles.title}>MicroBlog</Text>\r\n      </View>\r\n\r\n      <View style={styles.formContainer}>\r\n        <TextInput\r\n          style={styles.input}\r\n          placeholder=\"Usuario\"\r\n          value={username}\r\n          onChangeText={setUsername}\r\n          autoCapitalize=\"none\"\r\n        />\r\n        <TextInput\r\n          style={styles.input}\r\n          placeholder=\"Contraseña\"\r\n          value={password}\r\n          onChangeText={setPassword}\r\n          secureTextEntry\r\n        />\r\n\r\n        <TouchableOpacity style={styles.button} onPress={handleLogin} disabled={loading}>\r\n          <Text style={styles.buttonText}>{loading ? \"Iniciando sesión...\" : \"Iniciar Sesión\"}</Text>\r\n        </TouchableOpacity>\r\n\r\n        <Text style={styles.hint}>Prueba con: admin/admin (administrador) o user/user (usuario normal)</Text>\r\n      </View>\r\n    </View>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    padding: 20,\r\n    backgroundColor: \"#f5f8fa\",\r\n  },\r\n  logoContainer: {\r\n    alignItems: \"center\",\r\n    marginBottom: 40,\r\n  },\r\n  logo: {\r\n    width: 70,\r\n    height: 70,\r\n    marginBottom: 10,\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    fontWeight: \"bold\",\r\n    color: \"#1DA1F2\",\r\n  },\r\n  formContainer: {\r\n    backgroundColor: \"white\",\r\n    borderRadius: 10,\r\n    padding: 20,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 4,\r\n    elevation: 3,\r\n  },\r\n  input: {\r\n    height: 50,\r\n    borderWidth: 1,\r\n    borderColor: \"#e1e8ed\",\r\n    borderRadius: 5,\r\n    marginBottom: 15,\r\n    paddingHorizontal: 15,\r\n    backgroundColor: \"#fff\",\r\n  },\r\n  button: {\r\n    backgroundColor: \"#1DA1F2\",\r\n    height: 50,\r\n    borderRadius: 5,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    marginTop: 10,\r\n  },\r\n  buttonText: {\r\n    color: \"white\",\r\n    fontSize: 16,\r\n    fontWeight: \"bold\",\r\n  },\r\n  hint: {\r\n    marginTop: 20,\r\n    textAlign: \"center\",\r\n    color: \"#657786\",\r\n    fontSize: 12,\r\n  },\r\n})\r\n",
    "PostDetailScreen.tsx": "\"use client\"\r\n\r\nimport { useState, useEffect } from \"react\"\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  FlatList,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  KeyboardAvoidingView,\r\n  Platform,\r\n  ActivityIndicator,\r\n} from \"react-native\"\r\nimport { SafeAreaView } from \"react-native-safe-area-context\"\r\nimport { Send } from \"lucide-react-native\"\r\nimport Post from \"../components/Post\"\r\nimport Comment from \"../components/Comment\"\r\nimport { useAuth } from \"@/app/context/AuthContext\"\r\nimport { mockPosts, mockComments } from \"@/app/data/mockData\"\r\n\r\nexport default function PostDetailScreen({ route }: any) {\r\n  const { postId } = route.params\r\n  const { user } = useAuth()\r\n  const [post, setPost] = useState<any>(null)\r\n  const [comments, setComments] = useState<any[]>([])\r\n  const [newComment, setNewComment] = useState(\"\")\r\n  const [loading, setLoading] = useState(true)\r\n  const [submitting, setSubmitting] = useState(false)\r\n\r\n  useEffect(() => {\r\n    // Simular carga de post y comentarios\r\n    const fetchPostAndComments = async () => {\r\n      // En una app real, haríamos una petición a un API\r\n      await new Promise((resolve) => setTimeout(resolve, 1000))\r\n\r\n      const foundPost = mockPosts.find((p) => p.id === postId)\r\n      if (foundPost) {\r\n        setPost(foundPost)\r\n      }\r\n\r\n      // Filtrar comentarios para este post\r\n      const postComments = mockComments.filter((c) => c.postId === postId)\r\n      setComments(postComments)\r\n\r\n      setLoading(false)\r\n    }\r\n\r\n    fetchPostAndComments()\r\n  }, [postId])\r\n\r\n  const handleLike = (id: string) => {\r\n    // En una app real, enviaríamos esta acción al servidor\r\n    console.log(`Post ${id} liked/unliked`)\r\n  }\r\n\r\n  const handleSubmitComment = async () => {\r\n    if (!newComment.trim() || !user) return\r\n\r\n    setSubmitting(true)\r\n\r\n    // Simular envío de comentario\r\n    await new Promise((resolve) => setTimeout(resolve, 500))\r\n\r\n    // Crear nuevo comentario\r\n    const newCommentObj = {\r\n      id: `comment-${Date.now()}`,\r\n      postId,\r\n      author: {\r\n        id: user.id,\r\n        username: user.username,\r\n        avatar: user.avatar,\r\n        isAdmin: user.isAdmin,\r\n      },\r\n      content: newComment,\r\n      createdAt: new Date().toISOString(),\r\n    }\r\n\r\n    // Actualizar lista de comentarios\r\n    setComments((prev) => [newCommentObj, ...prev])\r\n\r\n    // Actualizar contador de comentarios en el post\r\n    if (post) {\r\n      setPost({\r\n        ...post,\r\n        comments: post.comments + 1,\r\n      })\r\n    }\r\n\r\n    // Limpiar campo de comentario\r\n    setNewComment(\"\")\r\n    setSubmitting(false)\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <View style={styles.loadingContainer}>\r\n        <ActivityIndicator size=\"large\" color=\"#1DA1F2\" />\r\n      </View>\r\n    )\r\n  }\r\n\r\n  if (!post) {\r\n    return (\r\n      <View style={styles.errorContainer}>\r\n        <Text style={styles.errorText}>No se encontró la publicación</Text>\r\n      </View>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <KeyboardAvoidingView\r\n      style={{ flex: 1 }}\r\n      behavior={Platform.OS === \"ios\" ? \"padding\" : undefined}\r\n      keyboardVerticalOffset={Platform.OS === \"ios\" ? 90 : 0}\r\n    >\r\n      <SafeAreaView style={styles.container}>\r\n        <FlatList\r\n          data={comments}\r\n          renderItem={({ item }) => <Comment comment={item} />}\r\n          keyExtractor={(item) => item.id}\r\n          ListHeaderComponent={() => (\r\n            <>\r\n              <Post post={post} onLike={handleLike} />\r\n              <View style={styles.commentsHeader}>\r\n                <Text style={styles.commentsTitle}>Comentarios ({comments.length})</Text>\r\n              </View>\r\n            </>\r\n          )}\r\n          ListEmptyComponent={\r\n            <View style={styles.emptyContainer}>\r\n              <Text style={styles.emptyText}>No hay comentarios. ¡Sé el primero en comentar!</Text>\r\n            </View>\r\n          }\r\n        />\r\n\r\n        <View style={styles.inputContainer}>\r\n          <TextInput\r\n            style={styles.input}\r\n            placeholder=\"Escribe un comentario...\"\r\n            value={newComment}\r\n            onChangeText={setNewComment}\r\n            multiline\r\n          />\r\n          <TouchableOpacity\r\n            style={[styles.sendButton, (!newComment.trim() || submitting) && styles.disabledButton]}\r\n            onPress={handleSubmitComment}\r\n            disabled={!newComment.trim() || submitting}\r\n          >\r\n            <Send size={20} color=\"white\" />\r\n          </TouchableOpacity>\r\n        </View>\r\n      </SafeAreaView>\r\n    </KeyboardAvoidingView>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#f5f8fa\",\r\n  },\r\n  loadingContainer: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  errorContainer: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    padding: 20,\r\n  },\r\n  errorText: {\r\n    fontSize: 16,\r\n    color: \"#657786\",\r\n    textAlign: \"center\",\r\n  },\r\n  commentsHeader: {\r\n    padding: 15,\r\n    backgroundColor: \"white\",\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: \"#E1E8ED\",\r\n  },\r\n  commentsTitle: {\r\n    fontSize: 16,\r\n    fontWeight: \"bold\",\r\n  },\r\n  emptyContainer: {\r\n    padding: 20,\r\n    alignItems: \"center\",\r\n  },\r\n  emptyText: {\r\n    color: \"#657786\",\r\n    textAlign: \"center\",\r\n  },\r\n  inputContainer: {\r\n    flexDirection: \"row\",\r\n    padding: 10,\r\n    backgroundColor: \"white\",\r\n    borderTopWidth: 1,\r\n    borderTopColor: \"#E1E8ED\",\r\n    alignItems: \"center\",\r\n  },\r\n  input: {\r\n    flex: 1,\r\n    borderWidth: 1,\r\n    borderColor: \"#E1E8ED\",\r\n    borderRadius: 20,\r\n    paddingHorizontal: 15,\r\n    paddingVertical: 8,\r\n    maxHeight: 100,\r\n    backgroundColor: \"#F5F8FA\",\r\n  },\r\n  sendButton: {\r\n    width: 40,\r\n    height: 40,\r\n    borderRadius: 20,\r\n    backgroundColor: \"#1DA1F2\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    marginLeft: 10,\r\n  },\r\n  disabledButton: {\r\n    backgroundColor: \"#AAB8C2\",\r\n  },\r\n})\r\n",
    "ProfileScreen.tsx": "\"use client\"\r\nimport { View, Text, StyleSheet, Image, TouchableOpacity, ScrollView } from \"react-native\"\r\nimport { SafeAreaView } from \"react-native-safe-area-context\"\r\nimport { LogOut } from \"lucide-react-native\"\r\nimport { useAuth } from \"@/app/context/AuthContext\"\r\n\r\nexport default function ProfileScreen() {\r\n  const { user, logout } = useAuth()\r\n\r\n  if (!user) {\r\n    return (\r\n      <View style={styles.container}>\r\n        <Text>No has iniciado sesión</Text>\r\n      </View>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <View style={styles.header}>\r\n        <Text style={styles.headerTitle}>Perfil</Text>\r\n        <TouchableOpacity onPress={logout} style={styles.logoutButton}>\r\n          <LogOut size={20} color=\"#657786\" />\r\n        </TouchableOpacity>\r\n      </View>\r\n\r\n      <ScrollView>\r\n        <View style={styles.profileHeader}>\r\n          <Image source={{ uri: user.avatar }} style={styles.avatar} />\r\n          <Text style={styles.username}>@{user.username}</Text>\r\n          {user.isAdmin && (\r\n            <View style={styles.adminBadge}>\r\n              <Text style={styles.adminText}>Administrador</Text>\r\n            </View>\r\n          )}\r\n        </View>\r\n\r\n        <View style={styles.infoSection}>\r\n          <Text style={styles.sectionTitle}>Información</Text>\r\n          <View style={styles.infoItem}>\r\n            <Text style={styles.infoLabel}>Tipo de cuenta:</Text>\r\n            <Text style={styles.infoValue}>{user.isAdmin ? \"Administrador\" : \"Usuario estándar\"}</Text>\r\n          </View>\r\n          <View style={styles.infoItem}>\r\n            <Text style={styles.infoLabel}>Permisos:</Text>\r\n            <Text style={styles.infoValue}>\r\n              {user.isAdmin ? \"Publicar, comentar, reaccionar\" : \"Comentar, reaccionar\"}\r\n            </Text>\r\n          </View>\r\n        </View>\r\n\r\n        <View style={styles.activitySection}>\r\n          <Text style={styles.sectionTitle}>Actividad</Text>\r\n          {user.isAdmin ? (\r\n            <View style={styles.statsContainer}>\r\n              <View style={styles.statItem}>\r\n                <Text style={styles.statValue}>12</Text>\r\n                <Text style={styles.statLabel}>Publicaciones</Text>\r\n              </View>\r\n              <View style={styles.statItem}>\r\n                <Text style={styles.statValue}>48</Text>\r\n                <Text style={styles.statLabel}>Comentarios</Text>\r\n              </View>\r\n            </View>\r\n          ) : (\r\n            <View style={styles.statsContainer}>\r\n              <View style={styles.statItem}>\r\n                <Text style={styles.statValue}>23</Text>\r\n                <Text style={styles.statLabel}>Comentarios</Text>\r\n              </View>\r\n              <View style={styles.statItem}>\r\n                <Text style={styles.statValue}>56</Text>\r\n                <Text style={styles.statLabel}>Reacciones</Text>\r\n              </View>\r\n            </View>\r\n          )}\r\n        </View>\r\n      </ScrollView>\r\n    </SafeAreaView>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#f5f8fa\",\r\n  },\r\n  header: {\r\n    backgroundColor: \"white\",\r\n    paddingVertical: 10,\r\n    paddingHorizontal: 15,\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: \"#E1E8ED\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n  },\r\n  headerTitle: {\r\n    fontSize: 18,\r\n    fontWeight: \"bold\",\r\n  },\r\n  logoutButton: {\r\n    padding: 5,\r\n  },\r\n  profileHeader: {\r\n    alignItems: \"center\",\r\n    padding: 20,\r\n    backgroundColor: \"white\",\r\n  },\r\n  avatar: {\r\n    width: 80,\r\n    height: 80,\r\n    borderRadius: 40,\r\n    marginBottom: 10,\r\n  },\r\n  username: {\r\n    fontSize: 18,\r\n    fontWeight: \"bold\",\r\n    marginBottom: 5,\r\n  },\r\n  adminBadge: {\r\n    backgroundColor: \"#1DA1F2\",\r\n    borderRadius: 15,\r\n    paddingHorizontal: 10,\r\n    paddingVertical: 5,\r\n  },\r\n  adminText: {\r\n    color: \"white\",\r\n    fontSize: 12,\r\n    fontWeight: \"bold\",\r\n  },\r\n  infoSection: {\r\n    backgroundColor: \"white\",\r\n    marginTop: 10,\r\n    padding: 15,\r\n  },\r\n  sectionTitle: {\r\n    fontSize: 16,\r\n    fontWeight: \"bold\",\r\n    marginBottom: 15,\r\n    color: \"#14171A\",\r\n  },\r\n  infoItem: {\r\n    flexDirection: \"row\",\r\n    marginBottom: 10,\r\n  },\r\n  infoLabel: {\r\n    width: 120,\r\n    fontSize: 14,\r\n    color: \"#657786\",\r\n  },\r\n  infoValue: {\r\n    flex: 1,\r\n    fontSize: 14,\r\n  },\r\n  activitySection: {\r\n    backgroundColor: \"white\",\r\n    marginTop: 10,\r\n    padding: 15,\r\n    marginBottom: 20,\r\n  },\r\n  statsContainer: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-around\",\r\n  },\r\n  statItem: {\r\n    alignItems: \"center\",\r\n  },\r\n  statValue: {\r\n    fontSize: 20,\r\n    fontWeight: \"bold\",\r\n    color: \"#1DA1F2\",\r\n  },\r\n  statLabel: {\r\n    fontSize: 14,\r\n    color: \"#657786\",\r\n  },\r\n})\r\n"
  }
}